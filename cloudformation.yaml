---
AWSTemplateFormatVersion:  2010-09-09

Parameters:
  EnvironmentName:
    Description: elizabeth-vpc-sandbox
    Type: String
    Default: elizabeth-vpc-sandbox

  VpcCIDR:
    Description: Please enter the IP CIDR range
    Type: String
    Default: 10.0.0.0/16

  AvailabilityZones:
    Description: The AZs in the target region
    Type: CommaDelimitedList
    Default: ap-southeast-2a,ap-southeast-2b

  PublicSubnetCIDR:
    Description: The Public CIDR Ranges
    Type: CommaDelimitedList
    Default: 10.0.1.0/24, 10.0.2.0/24

  PrivateSubnetCIDR:
    Description: The Private CIDR Ranges
    Type: CommaDelimitedList
    Default: 10.0.3.0/24, 10.0.4.0/24

  OfficeIP:
    Description: Office IP
    Type: String
    Default: 203.34.100.2/32  

Resources:
# VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-vpc
 # Gateway to the internet
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  # Associate the gateway to the VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  # Internet accessible subnet in the availability zone A
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !Ref AvailabilityZones ]
      CidrBlock: !Select [ 0, !Ref PublicSubnetCIDR ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-public-a
  # Internet accessible subnet in the availability zone B
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !Ref AvailabilityZones ]
      CidrBlock: !Select [ 1, !Ref PublicSubnetCIDR ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-public-b
  #Non-internet-accessible subnet in availability zone A
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !Ref AvailabilityZones ]
      CidrBlock: !Select [ 0, !Ref PrivateSubnetCIDR ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-private-a
  #Non-internet-accessible subnet in availability zone B
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !Ref AvailabilityZones ]
      CidrBlock: !Select [ 1, !Ref PrivateSubnetCIDR ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-private-b
  #Elastic IP for the Gateway for the private subnet A to be able to get onto the internet
  NatGatewayAEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
  #Elastic IP for the Gateway for the private subnet B to be able to get onto the internet
  NatGatewayBEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
  #Gateway for the private subnet A to be able to get onto the internet
  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAEIP.AllocationId
      SubnetId: !Ref PublicSubnetA
  #Gateway for the private subnet B to be able to get onto the internet
  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayBEIP.AllocationId
      SubnetId: !Ref PublicSubnetB
  # Routing table for the public subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-public

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  # Associate the public subnet A with its routing table
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA
  # Associate the public subnet B with its routing table
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB
  # Routing table for the private subnet in availability zone A
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-A
  
  DefaultPrivateRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA
  # Associate the private subnet with its routing table
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref PrivateSubnetA
# Routing table for the private subnet in availability zone B
  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-B

  DefaultPrivateRouteB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB
  # Associate the private subnet B with its routing table
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref PrivateSubnetB
  #Security group for the load balancer
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the ELB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        IpProtocol: tcp 
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref OfficeIP

  #Security group for the web servers
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http to client host from elb
        VpcId: !Ref VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ELBSecurityGroup

  # Linux Instance with Apache running on Port 80
  AmazonLinuxInstanceA:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0ded330691a314693
      InstanceType: t2.micro
      NetworkInterfaces:
      - AssociatePublicIpAddress: false
        DeviceIndex: 0
        GroupSet:
        - !Ref InstanceSecurityGroup
        SubnetId: !Ref PrivateSubnetA
      Tenancy: default
      UserData:
        Fn::Base64: |
          #!/bin/bash -xe
          yum update -y # good practice to update existing packages
          yum install -y httpd # install web server 
          systemctl start httpd
          systemctl enable httpd
          echo "Hello from web server A!" > /var/www/html/index.html
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-web-serverA  

# Linux Instance with Apache running on Port 80
  AmazonLinuxInstanceB:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0ded330691a314693
      InstanceType: t2.micro
      NetworkInterfaces:
      - AssociatePublicIpAddress: false
        DeviceIndex: 0
        GroupSet:
        - !Ref InstanceSecurityGroup
        SubnetId: !Ref PrivateSubnetB
      Tenancy: default
      UserData:
        Fn::Base64: |
          #!/bin/bash -xe
          yum update -y # good practice to update existing packages
          yum install -y httpd # install web server 
          systemctl start httpd
          systemctl enable httpd
          echo "Hello from web server B!" > /var/www/html/index.html
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-web-serverB

  ElasticLoadBalancer:
      Type: AWS::ElasticLoadBalancing::LoadBalancer
      Properties:
        Scheme: internet-facing
        Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
        Instances: 
        - !Ref AmazonLinuxInstanceA
        - !Ref AmazonLinuxInstanceB
        Listeners:
        - InstancePort: 80
          InstanceProtocol: HTTP
          LoadBalancerPort: 80
          Protocol: HTTP
        SecurityGroups:
        - !Ref ELBSecurityGroup

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Join [-, [VpcId, !Ref EnvironmentName]]

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnetA, !Ref PublicSubnetB]]
    Export:
      Name: !Join [-, [PublicSubnets, !Ref EnvironmentName]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnetA, !Ref PrivateSubnetB]]
    Export:
      Name: !Join [-, [PrivateSubnets, !Ref EnvironmentName]]

  NetworkCidr:
    Description: Network Cidr
    Value: !Ref VpcCIDR
    Export:
      Name: !Join [-, [NetworkCidr, !Ref EnvironmentName]]

  NatGateways:
    Description: Natgateway logical ids in
    Value: !Join [ ",", [ !Ref NatGatewayA, !Ref NatGatewayB]]
    Export:
      Name: !Join [-, [NatGateways, !Ref EnvironmentName]]

  ELBHostName:
    Description: Load Balancer Hostname
    Value: !GetAtt ElasticLoadBalancer.DNSName
